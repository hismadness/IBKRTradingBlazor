/* Copyright (C) 2024 Interactive Brokers LLC. All rights reserved. This code is subject to the terms
 * and conditions of the IB API Non-Commercial License or the IB API Commercial License, as applicable. */

using IBApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace TWSLib
{
    /**
     * @class CommissionAndFeesReport
     * @brief class representing the commission and fees generated by an execution.
     * @sa Execution
     */
    [ComVisible(true), ClassInterface(ClassInterfaceType.None)]
    public class ComCommissionAndFeesReport : ComWrapper<CommissionAndFeesReport>, ICommissionAndFeesReport
    {
        /**
        * @brief the execution's id this commissio and fees belongs to.
        */
        string ExecId
        {
            get { return data != null ? data.ExecId : default(string); }
            set { if (data != null) data.ExecId = value; }
        }

        /**
         * @brief the commission and fees cost.
         */
        double CommissionAndFees
        {
            get { return data != null ? data.CommissionAndFees : default(double); }
            set { if (data != null) data.CommissionAndFees = value; }
        }

        /**
        * @brief the reporting currency.
        */
        string Currency
        {
            get { return data != null ? data.Currency : default(string); }
            set { if (data != null) data.Currency = value; }
        }

        /**
        * @brief the realized profit and loss
        */
        double RealizedPNL
        {
            get { return data != null ? data.RealizedPNL : default(double); }
            set { if (data != null) data.RealizedPNL = value; }
        }

        /**
         * @brief The income return.
         */
        double Yield
        {
            get { return data != null ? data.Yield : default(double); }
            set { if (data != null) data.Yield = value; }
        }

        /**
         * @brief date expressed in yyyymmdd format.
         */
        int YieldRedemptionDate
        {
            get { return data != null ? data.YieldRedemptionDate : default(int); }
            set { if (data != null) data.YieldRedemptionDate = value; }
        }

        public override bool Equals(Object p_other)
        {
            bool l_bRetVal = false;

            if (p_other == null)
            {
                l_bRetVal = false;
            }
            else if (this == p_other)
            {
                l_bRetVal = true;
            }
            else
            {
                CommissionAndFeesReport l_theOther = (CommissionAndFeesReport)p_other;
                l_bRetVal = ExecId.Equals(l_theOther.ExecId);
            }
            return l_bRetVal;
        }

        string TWSLib.ICommissionAndFeesReport.execId
        {
            get { return ExecId; }
        }

        double TWSLib.ICommissionAndFeesReport.commissionAndFees
        {
            get { return CommissionAndFees; }
        }

        string TWSLib.ICommissionAndFeesReport.currency
        {
            get { return Currency; }
        }

        double TWSLib.ICommissionAndFeesReport.realizedPNL
        {
            get { return RealizedPNL; }
        }

        double TWSLib.ICommissionAndFeesReport.yield
        {
            get { return Yield; }
        }

        int TWSLib.ICommissionAndFeesReport.yieldRedemptionDate
        {
            get { return YieldRedemptionDate; }
        }

        public static explicit operator ComCommissionAndFeesReport(CommissionAndFeesReport cr)
        {
            return new ComCommissionAndFeesReport().ConvertFrom(cr) as ComCommissionAndFeesReport;
        }

        public static explicit operator CommissionAndFeesReport(ComCommissionAndFeesReport ccr)
        {
            return ccr.ConvertTo();
        }
    }
}
